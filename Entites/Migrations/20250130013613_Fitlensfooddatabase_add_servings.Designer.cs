// <auto-generated />
using System;
using Entites;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entites.Migrations
{
    [DbContext(typeof(FitLensDatabase))]
    [Migration("20250130013613_Fitlensfooddatabase_add_servings")]
    partial class Fitlensfooddatabase_add_servings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entites.Athlete", b =>
                {
                    b.Property<Guid>("AthleteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FitnessGoals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("HeightFeet")
                        .HasColumnType("int");

                    b.Property<int?>("HeightInches")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("NutritionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int?>("Zipcode")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("AthleteId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("UserId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Entites.AthleteNutritionInfo", b =>
                {
                    b.Property<Guid?>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AthleteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float");

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float");

                    b.Property<double?>("Folate")
                        .HasColumnType("float");

                    b.Property<double?>("Iron")
                        .HasColumnType("float");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double?>("Niacin")
                        .HasColumnType("float");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<double?>("Riboflavin")
                        .HasColumnType("float");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float");

                    b.Property<double?>("Thiamin")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalCholestrol")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VitaminC")
                        .HasColumnType("float");

                    b.Property<double?>("VitaminD")
                        .HasColumnType("float");

                    b.Property<double?>("Zinc")
                        .HasColumnType("float");

                    b.HasKey("NutritionId");

                    b.HasIndex("AthleteId");

                    b.ToTable("AthleteNutritionInfos");
                });

            modelBuilder.Entity("Entites.AthleteRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Entites.AthleteSessions", b =>
                {
                    b.Property<Guid?>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AthleteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float");

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float");

                    b.Property<double?>("Folate")
                        .HasColumnType("float");

                    b.Property<double?>("Iron")
                        .HasColumnType("float");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double?>("Niacin")
                        .HasColumnType("float");

                    b.Property<Guid?>("NutritionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<double?>("Riboflavin")
                        .HasColumnType("float");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float");

                    b.Property<double?>("Thiamin")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalCholestrol")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VitaminC")
                        .HasColumnType("float");

                    b.Property<double?>("VitaminD")
                        .HasColumnType("float");

                    b.Property<double?>("Zinc")
                        .HasColumnType("float");

                    b.HasKey("SessionId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("NutritionId");

                    b.ToTable("AthleteSessions");
                });

            modelBuilder.Entity("Entites.AthleteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entites.FitlensFoodDatabase", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "calcium");

                    b.Property<double?>("Calories")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "calories");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "carbs");

                    b.Property<double?>("Fats")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "fats");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "fiber");

                    b.Property<double?>("Folate")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "folate");

                    b.Property<double?>("Iron")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "iron");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "magnesium");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<double?>("Niacin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "niacin");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "potassium");

                    b.Property<double?>("Protein")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "protein");

                    b.Property<double?>("Riboflavin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "riboflavin");

                    b.Property<double>("ServingPerContainer")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "servingpercontainer");

                    b.Property<string>("ServingUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "servingunit");

                    b.Property<int>("Servingsize")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "servingSize");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "sodium");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "sugar");

                    b.Property<double?>("Thiamin")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "thiamin");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalCholestrol")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "totalcholestrol");

                    b.Property<double?>("VitaminC")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "vitaminc");

                    b.Property<double?>("VitaminD")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "vitamind");

                    b.Property<double?>("Zinc")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "zinc");

                    b.HasKey("FoodId");

                    b.ToTable("FitlensFoodDatabase");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entites.Athlete", b =>
                {
                    b.HasOne("Entites.AthleteNutritionInfo", "NutritionInfo")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entites.AthleteUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entites.AthleteNutritionInfo", b =>
                {
                    b.HasOne("Entites.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId");

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("Entites.AthleteSessions", b =>
                {
                    b.HasOne("Entites.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId");

                    b.HasOne("Entites.AthleteNutritionInfo", "NutritionInfo")
                        .WithMany()
                        .HasForeignKey("NutritionId");

                    b.Navigation("Athlete");

                    b.Navigation("NutritionInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Entites.AthleteRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entites.AthleteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entites.AthleteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Entites.AthleteRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entites.AthleteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entites.AthleteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
